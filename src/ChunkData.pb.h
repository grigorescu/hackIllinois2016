// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChunkData.proto

#ifndef PROTOBUF_ChunkData_2eproto__INCLUDED
#define PROTOBUF_ChunkData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ChunkData_2eproto();
void protobuf_AssignDesc_ChunkData_2eproto();
void protobuf_ShutdownFile_ChunkData_2eproto();

class ChunkData;

enum ChunkData_ChunkType {
  ChunkData_ChunkType_ADD = 0,
  ChunkData_ChunkType_SUB = 1
};
bool ChunkData_ChunkType_IsValid(int value);
const ChunkData_ChunkType ChunkData_ChunkType_ChunkType_MIN = ChunkData_ChunkType_ADD;
const ChunkData_ChunkType ChunkData_ChunkType_ChunkType_MAX = ChunkData_ChunkType_SUB;
const int ChunkData_ChunkType_ChunkType_ARRAYSIZE = ChunkData_ChunkType_ChunkType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChunkData_ChunkType_descriptor();
inline const ::std::string& ChunkData_ChunkType_Name(ChunkData_ChunkType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChunkData_ChunkType_descriptor(), value);
}
inline bool ChunkData_ChunkType_Parse(
    const ::std::string& name, ChunkData_ChunkType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChunkData_ChunkType>(
    ChunkData_ChunkType_descriptor(), name, value);
}
enum ChunkData_PrefixType {
  ChunkData_PrefixType_PREFIX_4B = 0,
  ChunkData_PrefixType_FULL_32B = 1
};
bool ChunkData_PrefixType_IsValid(int value);
const ChunkData_PrefixType ChunkData_PrefixType_PrefixType_MIN = ChunkData_PrefixType_PREFIX_4B;
const ChunkData_PrefixType ChunkData_PrefixType_PrefixType_MAX = ChunkData_PrefixType_FULL_32B;
const int ChunkData_PrefixType_PrefixType_ARRAYSIZE = ChunkData_PrefixType_PrefixType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChunkData_PrefixType_descriptor();
inline const ::std::string& ChunkData_PrefixType_Name(ChunkData_PrefixType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChunkData_PrefixType_descriptor(), value);
}
inline bool ChunkData_PrefixType_Parse(
    const ::std::string& name, ChunkData_PrefixType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChunkData_PrefixType>(
    ChunkData_PrefixType_descriptor(), name, value);
}
// ===================================================================

class ChunkData : public ::google::protobuf::Message {
 public:
  ChunkData();
  virtual ~ChunkData();

  ChunkData(const ChunkData& from);

  inline ChunkData& operator=(const ChunkData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChunkData& default_instance();

  void Swap(ChunkData* other);

  // implements Message ----------------------------------------------

  ChunkData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChunkData& from);
  void MergeFrom(const ChunkData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ChunkData_ChunkType ChunkType;
  static const ChunkType ADD = ChunkData_ChunkType_ADD;
  static const ChunkType SUB = ChunkData_ChunkType_SUB;
  static inline bool ChunkType_IsValid(int value) {
    return ChunkData_ChunkType_IsValid(value);
  }
  static const ChunkType ChunkType_MIN =
    ChunkData_ChunkType_ChunkType_MIN;
  static const ChunkType ChunkType_MAX =
    ChunkData_ChunkType_ChunkType_MAX;
  static const int ChunkType_ARRAYSIZE =
    ChunkData_ChunkType_ChunkType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ChunkType_descriptor() {
    return ChunkData_ChunkType_descriptor();
  }
  static inline const ::std::string& ChunkType_Name(ChunkType value) {
    return ChunkData_ChunkType_Name(value);
  }
  static inline bool ChunkType_Parse(const ::std::string& name,
      ChunkType* value) {
    return ChunkData_ChunkType_Parse(name, value);
  }

  typedef ChunkData_PrefixType PrefixType;
  static const PrefixType PREFIX_4B = ChunkData_PrefixType_PREFIX_4B;
  static const PrefixType FULL_32B = ChunkData_PrefixType_FULL_32B;
  static inline bool PrefixType_IsValid(int value) {
    return ChunkData_PrefixType_IsValid(value);
  }
  static const PrefixType PrefixType_MIN =
    ChunkData_PrefixType_PrefixType_MIN;
  static const PrefixType PrefixType_MAX =
    ChunkData_PrefixType_PrefixType_MAX;
  static const int PrefixType_ARRAYSIZE =
    ChunkData_PrefixType_PrefixType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PrefixType_descriptor() {
    return ChunkData_PrefixType_descriptor();
  }
  static inline const ::std::string& PrefixType_Name(PrefixType value) {
    return ChunkData_PrefixType_Name(value);
  }
  static inline bool PrefixType_Parse(const ::std::string& name,
      PrefixType* value) {
    return ChunkData_PrefixType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 chunk_number = 1;
  inline bool has_chunk_number() const;
  inline void clear_chunk_number();
  static const int kChunkNumberFieldNumber = 1;
  inline ::google::protobuf::int32 chunk_number() const;
  inline void set_chunk_number(::google::protobuf::int32 value);

  // optional .ChunkData.ChunkType chunk_type = 2 [default = ADD];
  inline bool has_chunk_type() const;
  inline void clear_chunk_type();
  static const int kChunkTypeFieldNumber = 2;
  inline ::ChunkData_ChunkType chunk_type() const;
  inline void set_chunk_type(::ChunkData_ChunkType value);

  // optional .ChunkData.PrefixType prefix_type = 3 [default = PREFIX_4B];
  inline bool has_prefix_type() const;
  inline void clear_prefix_type();
  static const int kPrefixTypeFieldNumber = 3;
  inline ::ChunkData_PrefixType prefix_type() const;
  inline void set_prefix_type(::ChunkData_PrefixType value);

  // optional bytes hashes = 4;
  inline bool has_hashes() const;
  inline void clear_hashes();
  static const int kHashesFieldNumber = 4;
  inline const ::std::string& hashes() const;
  inline void set_hashes(const ::std::string& value);
  inline void set_hashes(const char* value);
  inline void set_hashes(const void* value, size_t size);
  inline ::std::string* mutable_hashes();
  inline ::std::string* release_hashes();
  inline void set_allocated_hashes(::std::string* hashes);

  // repeated int32 add_numbers = 5 [packed = true];
  inline int add_numbers_size() const;
  inline void clear_add_numbers();
  static const int kAddNumbersFieldNumber = 5;
  inline ::google::protobuf::int32 add_numbers(int index) const;
  inline void set_add_numbers(int index, ::google::protobuf::int32 value);
  inline void add_add_numbers(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      add_numbers() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_add_numbers();

  // @@protoc_insertion_point(class_scope:ChunkData)
 private:
  inline void set_has_chunk_number();
  inline void clear_has_chunk_number();
  inline void set_has_chunk_type();
  inline void clear_has_chunk_type();
  inline void set_has_prefix_type();
  inline void clear_has_prefix_type();
  inline void set_has_hashes();
  inline void clear_has_hashes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 chunk_number_;
  int chunk_type_;
  ::std::string* hashes_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > add_numbers_;
  mutable int _add_numbers_cached_byte_size_;
  int prefix_type_;
  friend void  protobuf_AddDesc_ChunkData_2eproto();
  friend void protobuf_AssignDesc_ChunkData_2eproto();
  friend void protobuf_ShutdownFile_ChunkData_2eproto();

  void InitAsDefaultInstance();
  static ChunkData* default_instance_;
};
// ===================================================================


// ===================================================================

// ChunkData

// required int32 chunk_number = 1;
inline bool ChunkData::has_chunk_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChunkData::set_has_chunk_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChunkData::clear_has_chunk_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChunkData::clear_chunk_number() {
  chunk_number_ = 0;
  clear_has_chunk_number();
}
inline ::google::protobuf::int32 ChunkData::chunk_number() const {
  // @@protoc_insertion_point(field_get:ChunkData.chunk_number)
  return chunk_number_;
}
inline void ChunkData::set_chunk_number(::google::protobuf::int32 value) {
  set_has_chunk_number();
  chunk_number_ = value;
  // @@protoc_insertion_point(field_set:ChunkData.chunk_number)
}

// optional .ChunkData.ChunkType chunk_type = 2 [default = ADD];
inline bool ChunkData::has_chunk_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChunkData::set_has_chunk_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChunkData::clear_has_chunk_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChunkData::clear_chunk_type() {
  chunk_type_ = 0;
  clear_has_chunk_type();
}
inline ::ChunkData_ChunkType ChunkData::chunk_type() const {
  // @@protoc_insertion_point(field_get:ChunkData.chunk_type)
  return static_cast< ::ChunkData_ChunkType >(chunk_type_);
}
inline void ChunkData::set_chunk_type(::ChunkData_ChunkType value) {
  assert(::ChunkData_ChunkType_IsValid(value));
  set_has_chunk_type();
  chunk_type_ = value;
  // @@protoc_insertion_point(field_set:ChunkData.chunk_type)
}

// optional .ChunkData.PrefixType prefix_type = 3 [default = PREFIX_4B];
inline bool ChunkData::has_prefix_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChunkData::set_has_prefix_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChunkData::clear_has_prefix_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChunkData::clear_prefix_type() {
  prefix_type_ = 0;
  clear_has_prefix_type();
}
inline ::ChunkData_PrefixType ChunkData::prefix_type() const {
  // @@protoc_insertion_point(field_get:ChunkData.prefix_type)
  return static_cast< ::ChunkData_PrefixType >(prefix_type_);
}
inline void ChunkData::set_prefix_type(::ChunkData_PrefixType value) {
  assert(::ChunkData_PrefixType_IsValid(value));
  set_has_prefix_type();
  prefix_type_ = value;
  // @@protoc_insertion_point(field_set:ChunkData.prefix_type)
}

// optional bytes hashes = 4;
inline bool ChunkData::has_hashes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChunkData::set_has_hashes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChunkData::clear_has_hashes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChunkData::clear_hashes() {
  if (hashes_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hashes_->clear();
  }
  clear_has_hashes();
}
inline const ::std::string& ChunkData::hashes() const {
  // @@protoc_insertion_point(field_get:ChunkData.hashes)
  return *hashes_;
}
inline void ChunkData::set_hashes(const ::std::string& value) {
  set_has_hashes();
  if (hashes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hashes_ = new ::std::string;
  }
  hashes_->assign(value);
  // @@protoc_insertion_point(field_set:ChunkData.hashes)
}
inline void ChunkData::set_hashes(const char* value) {
  set_has_hashes();
  if (hashes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hashes_ = new ::std::string;
  }
  hashes_->assign(value);
  // @@protoc_insertion_point(field_set_char:ChunkData.hashes)
}
inline void ChunkData::set_hashes(const void* value, size_t size) {
  set_has_hashes();
  if (hashes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hashes_ = new ::std::string;
  }
  hashes_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ChunkData.hashes)
}
inline ::std::string* ChunkData::mutable_hashes() {
  set_has_hashes();
  if (hashes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hashes_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ChunkData.hashes)
  return hashes_;
}
inline ::std::string* ChunkData::release_hashes() {
  clear_has_hashes();
  if (hashes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = hashes_;
    hashes_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChunkData::set_allocated_hashes(::std::string* hashes) {
  if (hashes_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hashes_;
  }
  if (hashes) {
    set_has_hashes();
    hashes_ = hashes;
  } else {
    clear_has_hashes();
    hashes_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ChunkData.hashes)
}

// repeated int32 add_numbers = 5 [packed = true];
inline int ChunkData::add_numbers_size() const {
  return add_numbers_.size();
}
inline void ChunkData::clear_add_numbers() {
  add_numbers_.Clear();
}
inline ::google::protobuf::int32 ChunkData::add_numbers(int index) const {
  // @@protoc_insertion_point(field_get:ChunkData.add_numbers)
  return add_numbers_.Get(index);
}
inline void ChunkData::set_add_numbers(int index, ::google::protobuf::int32 value) {
  add_numbers_.Set(index, value);
  // @@protoc_insertion_point(field_set:ChunkData.add_numbers)
}
inline void ChunkData::add_add_numbers(::google::protobuf::int32 value) {
  add_numbers_.Add(value);
  // @@protoc_insertion_point(field_add:ChunkData.add_numbers)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ChunkData::add_numbers() const {
  // @@protoc_insertion_point(field_list:ChunkData.add_numbers)
  return add_numbers_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ChunkData::mutable_add_numbers() {
  // @@protoc_insertion_point(field_mutable_list:ChunkData.add_numbers)
  return &add_numbers_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ChunkData_ChunkType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ChunkData_ChunkType>() {
  return ::ChunkData_ChunkType_descriptor();
}
template <> struct is_proto_enum< ::ChunkData_PrefixType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ChunkData_PrefixType>() {
  return ::ChunkData_PrefixType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ChunkData_2eproto__INCLUDED
