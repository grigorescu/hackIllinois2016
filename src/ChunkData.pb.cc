// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChunkData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ChunkData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ChunkData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChunkData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ChunkData_ChunkType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ChunkData_PrefixType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ChunkData_2eproto() {
  protobuf_AddDesc_ChunkData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ChunkData.proto");
  GOOGLE_CHECK(file != NULL);
  ChunkData_descriptor_ = file->message_type(0);
  static const int ChunkData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkData, chunk_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkData, chunk_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkData, prefix_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkData, hashes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkData, add_numbers_),
  };
  ChunkData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChunkData_descriptor_,
      ChunkData::default_instance_,
      ChunkData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChunkData));
  ChunkData_ChunkType_descriptor_ = ChunkData_descriptor_->enum_type(0);
  ChunkData_PrefixType_descriptor_ = ChunkData_descriptor_->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ChunkData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChunkData_descriptor_, &ChunkData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ChunkData_2eproto() {
  delete ChunkData::default_instance_;
  delete ChunkData_reflection_;
}

void protobuf_AddDesc_ChunkData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017ChunkData.proto\"\372\001\n\tChunkData\022\024\n\014chunk"
    "_number\030\001 \002(\005\022-\n\nchunk_type\030\002 \001(\0162\024.Chun"
    "kData.ChunkType:\003ADD\0225\n\013prefix_type\030\003 \001("
    "\0162\025.ChunkData.PrefixType:\tPREFIX_4B\022\016\n\006h"
    "ashes\030\004 \001(\014\022\027\n\013add_numbers\030\005 \003(\005B\002\020\001\"\035\n\t"
    "ChunkType\022\007\n\003ADD\020\000\022\007\n\003SUB\020\001\")\n\nPrefixTyp"
    "e\022\r\n\tPREFIX_4B\020\000\022\014\n\010FULL_32B\020\001", 270);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ChunkData.proto", &protobuf_RegisterTypes);
  ChunkData::default_instance_ = new ChunkData();
  ChunkData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ChunkData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ChunkData_2eproto {
  StaticDescriptorInitializer_ChunkData_2eproto() {
    protobuf_AddDesc_ChunkData_2eproto();
  }
} static_descriptor_initializer_ChunkData_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* ChunkData_ChunkType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChunkData_ChunkType_descriptor_;
}
bool ChunkData_ChunkType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ChunkData_ChunkType ChunkData::ADD;
const ChunkData_ChunkType ChunkData::SUB;
const ChunkData_ChunkType ChunkData::ChunkType_MIN;
const ChunkData_ChunkType ChunkData::ChunkType_MAX;
const int ChunkData::ChunkType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ChunkData_PrefixType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChunkData_PrefixType_descriptor_;
}
bool ChunkData_PrefixType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ChunkData_PrefixType ChunkData::PREFIX_4B;
const ChunkData_PrefixType ChunkData::FULL_32B;
const ChunkData_PrefixType ChunkData::PrefixType_MIN;
const ChunkData_PrefixType ChunkData::PrefixType_MAX;
const int ChunkData::PrefixType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ChunkData::kChunkNumberFieldNumber;
const int ChunkData::kChunkTypeFieldNumber;
const int ChunkData::kPrefixTypeFieldNumber;
const int ChunkData::kHashesFieldNumber;
const int ChunkData::kAddNumbersFieldNumber;
#endif  // !_MSC_VER

ChunkData::ChunkData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChunkData::InitAsDefaultInstance() {
}

ChunkData::ChunkData(const ChunkData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChunkData::SharedCtor() {
  _cached_size_ = 0;
  chunk_number_ = 0;
  chunk_type_ = 0;
  prefix_type_ = 0;
  hashes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChunkData::~ChunkData() {
  SharedDtor();
}

void ChunkData::SharedDtor() {
  if (hashes_ != &::google::protobuf::internal::kEmptyString) {
    delete hashes_;
  }
  if (this != default_instance_) {
  }
}

void ChunkData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChunkData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChunkData_descriptor_;
}

const ChunkData& ChunkData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChunkData_2eproto();
  return *default_instance_;
}

ChunkData* ChunkData::default_instance_ = NULL;

ChunkData* ChunkData::New() const {
  return new ChunkData;
}

void ChunkData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chunk_number_ = 0;
    chunk_type_ = 0;
    prefix_type_ = 0;
    if (has_hashes()) {
      if (hashes_ != &::google::protobuf::internal::kEmptyString) {
        hashes_->clear();
      }
    }
  }
  add_numbers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChunkData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 chunk_number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chunk_number_)));
          set_has_chunk_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chunk_type;
        break;
      }

      // optional .ChunkData.ChunkType chunk_type = 2 [default = ADD];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chunk_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ChunkData_ChunkType_IsValid(value)) {
            set_chunk_type(static_cast< ::ChunkData_ChunkType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_prefix_type;
        break;
      }

      // optional .ChunkData.PrefixType prefix_type = 3 [default = PREFIX_4B];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prefix_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ChunkData_PrefixType_IsValid(value)) {
            set_prefix_type(static_cast< ::ChunkData_PrefixType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_hashes;
        break;
      }

      // optional bytes hashes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hashes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hashes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_add_numbers;
        break;
      }

      // repeated int32 add_numbers = 5 [packed = true];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_add_numbers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_add_numbers())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 42, input, this->mutable_add_numbers())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChunkData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 chunk_number = 1;
  if (has_chunk_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chunk_number(), output);
  }

  // optional .ChunkData.ChunkType chunk_type = 2 [default = ADD];
  if (has_chunk_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->chunk_type(), output);
  }

  // optional .ChunkData.PrefixType prefix_type = 3 [default = PREFIX_4B];
  if (has_prefix_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->prefix_type(), output);
  }

  // optional bytes hashes = 4;
  if (has_hashes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->hashes(), output);
  }

  // repeated int32 add_numbers = 5 [packed = true];
  if (this->add_numbers_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_add_numbers_cached_byte_size_);
  }
  for (int i = 0; i < this->add_numbers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->add_numbers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChunkData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 chunk_number = 1;
  if (has_chunk_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chunk_number(), target);
  }

  // optional .ChunkData.ChunkType chunk_type = 2 [default = ADD];
  if (has_chunk_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->chunk_type(), target);
  }

  // optional .ChunkData.PrefixType prefix_type = 3 [default = PREFIX_4B];
  if (has_prefix_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->prefix_type(), target);
  }

  // optional bytes hashes = 4;
  if (has_hashes()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->hashes(), target);
  }

  // repeated int32 add_numbers = 5 [packed = true];
  if (this->add_numbers_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _add_numbers_cached_byte_size_, target);
  }
  for (int i = 0; i < this->add_numbers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->add_numbers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChunkData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 chunk_number = 1;
    if (has_chunk_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chunk_number());
    }

    // optional .ChunkData.ChunkType chunk_type = 2 [default = ADD];
    if (has_chunk_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->chunk_type());
    }

    // optional .ChunkData.PrefixType prefix_type = 3 [default = PREFIX_4B];
    if (has_prefix_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->prefix_type());
    }

    // optional bytes hashes = 4;
    if (has_hashes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hashes());
    }

  }
  // repeated int32 add_numbers = 5 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->add_numbers_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->add_numbers(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _add_numbers_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChunkData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChunkData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChunkData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChunkData::MergeFrom(const ChunkData& from) {
  GOOGLE_CHECK_NE(&from, this);
  add_numbers_.MergeFrom(from.add_numbers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chunk_number()) {
      set_chunk_number(from.chunk_number());
    }
    if (from.has_chunk_type()) {
      set_chunk_type(from.chunk_type());
    }
    if (from.has_prefix_type()) {
      set_prefix_type(from.prefix_type());
    }
    if (from.has_hashes()) {
      set_hashes(from.hashes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChunkData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChunkData::CopyFrom(const ChunkData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChunkData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ChunkData::Swap(ChunkData* other) {
  if (other != this) {
    std::swap(chunk_number_, other->chunk_number_);
    std::swap(chunk_type_, other->chunk_type_);
    std::swap(prefix_type_, other->prefix_type_);
    std::swap(hashes_, other->hashes_);
    add_numbers_.Swap(&other->add_numbers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChunkData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChunkData_descriptor_;
  metadata.reflection = ChunkData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
